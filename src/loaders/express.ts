import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import routes from '../api';
import config from 'config';
import DbConnection from './dbconnection';
import httpContext from 'express-http-context';

export default ({ app }: { app: express.Application }) => {
  /**
   * ヘルスチェック
   */
  app.get('/status', (req, res) => {
    res.status(200).end();
  });
  app.head('/status', (req, res) => {
    res.status(200).end();
  });

  /**
   * SwaggerUI
   * /api-docsにアクセスした場合、swagger-uiの画面が表示される
   * 商用環境以外で動作
   */
  if (process.env.NODE_ENV !== 'production') {
    const swaggerJsdoc = require('swagger-jsdoc');
    const options: object = {
      swaggerDefinition: {
        openapi: '3.0.2',
        // Like the one described here: https://swagger.io/specification/#infoObject
        info: {
          title: 'Trace API',
          version: '1.0.0',
          description: 'Trace API with autogenerated swagger doc'
        },
        components: {
          securitySchemes: {
            bearerAuth: {
              type: 'http',
              scheme: 'bearer',
              bearerFormat: 'JWT'
            }
          }
        }
      },
      // List of files to be processes. You can also set globs '../api/routes/*.ts'
      apis: ['**/*.ts']
    };

    const specs = swaggerJsdoc(options);
    const swaggerUi = require('swagger-ui-express');
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));
  }

  app.use(cors());
  app.use(require('method-override')());
  app.use(bodyParser.json());
  app.use(httpContext.middleware);
  app.use(DbConnection.middleware);

  app.use(config.api.prefix, routes());

  /// 404エラーハンドラー
  app.use((req, res, next) => {
    const err = new Error('Not Found');
    err['status'] = 404;
    next(err);
  });

  // その他のエラーハンドラー
  app.use((err, req, res, next) => {
    if (err.name === 'UnauthorizedError') {
      return res
        .status(err.status)
        .send({ message: err.message })
        .end();
    }
    return next(err);
  });
  app.use((err, req, res, next) => {
    res.status(err.status || 500);
    res.json({
      errors: {
        message: err.statusText,
      },
    });
  });
};
